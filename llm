<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LLM Chat Widget</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f0f0f0;
      color: #333;
    }
    .widget-container {
      max-width: 400px;
      margin: auto;
      padding: 20px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
    }
    h3 {
      margin-bottom: 15px;
    }
    textarea {
      width: 100%;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #ccc;
      margin-bottom: 10px;
    }
    button {
      width: 100%;
      padding: 10px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background-color: #0056b3;
    }
    .status {
      margin-bottom: 15px;
      font-size: 14px;
      color: green;
    }
    .response {
      margin-top: 10px;
      padding: 10px;
      background-color: #f8f9fa;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
  </style>
</head>
<body>

  <div class="widget-container">
    <h3>LLM Chat Widget</h3>
    <p id="status" class="status">Vérification de la connexion...</p>
    <textarea id="message" rows="4" placeholder="Écris ici pour discuter..."></textarea>
    <button id="sendButton" disabled>Envoyer</button>
    <div id="response" class="response"></div>
  </div>

  <script>
    const LLM_LOCAL_URL = 'https://husky-darling-sharply.ngrok-free.app/api/chat';
    const GPT_API_URL = 'https://api.openai.com/v1/chat/completions';
    const OPENAI_API_KEY = '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';

    const statusText = document.getElementById('status');
    const sendButton = document.getElementById('sendButton');
    const messageInput = document.getElementById('message');
    const responseContainer = document.getElementById('response');

    // Vérifier si le LLM local est disponible
    async function checkLLMConnection() {
      try {
        const response = await fetch(LLM_LOCAL_URL, { method: 'GET' });
        if (response.ok) {
          statusText.textContent = 'LLM local connecté';
          sendButton.disabled = false;
          return true;
        }
      } catch (error) {
        console.error('Erreur de connexion au LLM local:', error);
      }
      statusText.textContent = 'LLM local indisponible, utilisation de GPT-4';
      sendButton.disabled = false;
      return false;
    }

    // Envoyer le message au LLM ou à ChatGPT
    async function sendMessage() {
      const userMessage = messageInput.value;
      responseContainer.textContent = 'Réponse en cours...';

      const isLocalAvailable = await checkLLMConnection();
      const apiUrl = isLocalAvailable ? LLM_LOCAL_URL : GPT_API_URL;
      const payload = isLocalAvailable ? { content: userMessage } : {
        model: "gpt-4",
        messages: [
          { role: "system", content: "Tu es un assistant utile." },
          { role: "user", content: userMessage }
        ],
        max_tokens: 100,
        temperature: 0.7
      };

      const headers = isLocalAvailable ? { 'Content-Type': 'application/json' } : {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      };

      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(payload)
        });
        const data = await response.json();
        const reply = isLocalAvailable ? data.message.content : data.choices[0].message.content;
        responseContainer.textContent = reply;
      } catch (error) {
        responseContainer.textContent = 'Erreur lors de l\'envoi du message : ' + error.message;
      }
    }

    sendButton.addEventListener('click', sendMessage);
    checkLLMConnection();
  </script>

</body>
</html>
